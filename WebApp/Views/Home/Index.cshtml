@using Microsoft.CodeAnalysis.CSharp.Syntax
@model WebApp.Models.SummonerViewModel

@{
    ViewData["Title"] = "SummonerLookup";
}

<h2>SummonerLookup</h2>

<h4>SummonerViewModel</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Index">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="SummonerName" class="control-label"></label>
                <input asp-for="SummonerName" class="form-control" value="FriendlyRob" />
                <span asp-validation-for="SummonerName" class="text-danger"></span>
            </div>
            <div class="form-group">
                @Html.DropDownListFor(model => model.Region, new SelectList(ViewBag.RegionList))
            </div>
            <div class="form-group">
                <input type="submit" value="Lookup" class="btn btn-default" />
            </div>
        </form>
    </div>
    @if (TempData["SummonerName"] != null)
    {

        <div class="col-md-8" style="border: 1px solid red">
            <div class="summoner">
                <div class="profile-icon">
                    <img src="~/images/profileicon/@(TempData["ProfileIconId"]).png" class="profile-icon-image">
                </div>
                <div class="summoner-info">
                    <div class="summoner-name">@TempData["SummonerName"]</div>
                    <div class="summoner-level">Level: @TempData["SummonerLevel"]</div>
                </div>
            </div>
            @if (ViewBag.SummonerRanks != null)
            {
                <div class="summoner-ranks">
                    <div class="rank-tabs-buttons">
                        @foreach (var rank in ViewBag.SummonerRanks)
                        {
                            switch (rank.QueueType)
                            {
                                // TODO: Order these by order set underneath
                                case "RANKED_SOLO_5x5":
                                    <button onclick="openRank('Solo-5x5')">Solo 5x5</button>
                                    break;
                                case "RANKED_FLEX_SR":
                                    <button onclick="openRank('Flex-5x5')">Flex 5x5</button>
                                    break;
                                case "RANKED_FLEX_TT":
                                    <button onclick="openRank('Flex-3x3')">Flex 3x3</button>
                                    break;
                                case "RANKED_TFT":
                                    <button onclick="openRank('TFT')">TFT</button>
                                    break;
                                default:
                                    <span>No Rank Found</span>
                                    break;
                            }
                        }
                    </div>
                    <div class="rank-tabs">
                        @foreach (var rank in ViewBag.SummonerRanks)
                        {
                            switch (rank.QueueType)
                            {
                                case "RANKED_SOLO_5x5":
                                    <div id="Solo-5x5" class="rank-tab">
                                        <div class="rank-icon">
                                            <img src="~/images/ranks/Emblem_@(rank.Tier).png" class="rank-icon-image" alt="Rank-Tier">
                                        </div>
                                        <div class="rank-info">
                                            <h2>Solo 5x5</h2>
                                            <div>@rank.Tier @rank.Division @rank.LeaguePoints LP</div>
                                            <div>W:@rank.Wins L:@rank.Losses</div>
                                        </div>
                                    </div>
                                    break;
                                case "RANKED_FLEX_SR":
                                    <div id="Flex-5x5" class="rank-tab" style="display: none">
                                        <div class="rank-icon">
                                            <img src="~/images/ranks/Emblem_@(rank.Tier).png" class="rank-icon-image" alt="Rank-Tier">
                                        </div>
                                        <div class="rank-info">
                                            <h2>Flex 5x5</h2>
                                            <div>@rank.Tier @rank.Division @rank.LeaguePoints LP</div>
                                            <div>W :@rank.Wins L: @rank.Losses</div>
                                        </div>
                                    </div>
                                    break;
                                case "RANKED_FLEX_TT":
                                    <div id="Flex-3x3" class="rank-tab" style="display: none">
                                        <div class="rank-icon">
                                            <img src="~/images/ranks/Emblem_@(rank.Tier).png" class="rank-icon-image" alt="Rank-Tier">
                                        </div>
                                        <div class="rank-info">
                                            <h2>Flex 3x3</h2>
                                            <div>@rank.Tier @rank.Division @rank.LeaguePoints LP</div>
                                            <div>W :@rank.Wins L: @rank.Losses</div>
                                        </div>
                                    </div>
                                    break;
                                case "RANKED_TFT":
                                    <div id="TFT" class="rank-tab" style="display: none">
                                        <div class="rank-icon">
                                            <img src="~/images/ranks/Emblem_@(rank.Tier).png" class="rank-icon-image" alt="Rank-Tier">
                                        </div>
                                        <div class="rank-info">
                                            <h2>TFT</h2>
                                            <div>@rank.Tier @rank.Division @rank.LeaguePoints LP</div>
                                            <div>W :@rank.Wins L: @rank.Losses</div>
                                        </div>
                                    </div>
                                    break;
                                default:
                                    <span>No Rank Found</span>
                                    break;
                            }
                        }
                    </div>
                </div>
            }
            @if (ViewBag.PlayedGames != null)
            {
                <div class="played-games-history-list">
                    @foreach (var game in ViewBag.PlayedGames)
                    {
                        <div class="played-game-wrap">
                            <div class="played-game">
                                <div class="played-game-champion-icon" title="GameId: @game.GameId">
                                    <img src="~/images/champion/@(@game.ChampionObject.ChampionName).png" class="played-game-champion-icon-image" title="ChampionID: @game.ChampionId | @game.ChampionObject.ChampionName" alt="Champion">
                                </div>
                                <div class="played-game-info">
                                    @if (game.Position != null)
                                    {
                                        <div positionGame>Position: @game.Position.Name</div>
                                    }
                                    <div class="queueTypeGame" title="QueueTypeId: @game.GameObject.QueueTypeId">QueueType: @game.GameObject.QueueType.Description</div>
                                    <div class="timeSinceGame" title="@game.GameObject.DateCreated.ToString("dd-MM-yyyy HH:mm:ss")">
                                        Time since:
                                        @{
                                            TimeSpan timeSince = DateTime.Now.Subtract(game.GameObject.DateCreated);
                                            double timeSinceInDays = (Math.Floor(timeSince.TotalDays));
                                            double timeSinceInHours = (Math.Floor(timeSince.TotalHours));
                                        }
                                        @switch (timeSinceInDays)
                                        {
                                            case 0:

                                                switch (timeSinceInHours)
                                                {
                                                    case 0:
                                                        @Math.Floor(timeSince.TotalMinutes) @: Minutes ago
                                                        break;
                                                    case 1:
                                                        @:1 Hour ago
                                                        break;
                                                    default:
                                                        @timeSinceInHours @: Hours ago
                                                        break;
                                                }
                                                break; // TODO: check: Will it ever reach this break?
                                            case 1:
                                                @:1 day ago
                                                break;
                                            default:
                                                @timeSinceInDays @: Days ago
                                                break;
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }

        </div>
    }
</div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

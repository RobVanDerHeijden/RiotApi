@using Microsoft.CodeAnalysis.CSharp.Syntax
@model WebApp.Models.SummonerViewModel

@{
    ViewData["Title"] = "SummonerLookup";
}

<h2>SummonerLookup</h2>

<h4>SummonerViewModel</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Index">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="SummonerName" class="control-label"></label>
                <input asp-for="SummonerName" class="form-control" value="FriendlyRob" />
                <span asp-validation-for="SummonerName" class="text-danger"></span>
            </div>
            <div class="form-group">
                @Html.DropDownListFor(model => model.Region, new SelectList(ViewBag.RegionList))
            </div>
            @*<span>@((ViewBag.RegionList as Dictionary<string, string>).Count)</span>*@
            
            

            <div class="form-group">
                <input type="submit" value="Lookup" class="btn btn-default" />
            </div>
        </form>
    </div>
    @if (TempData["SummonerLevel"] != null)
    {
        <div class="col-md-2">
        </div>
        
        <div class="col-md-4" style="border: 1px solid red">
            <div style="float:left">
                <img src="~/images/profileicon/@(TempData["ProfileIconId"]).png">
            </div>
            Summoner Level: @TempData["SummonerLevel"]
            
            @if (ViewBag.PlayedGames != null)
            {
                <ul>
                    @foreach (var game in ViewBag.PlayedGames)
                    {
                        <li>GameID: @game.GameId + Champion: @game.Champion</li>
                    }
                </ul>
            }
        </div>
        
    }
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
